private static boolean isAlert(String json) {
    try {
        JsonNode node = new ObjectMapper().readTree(json);
        return "ALERT".equals(node.get("status").asText());
    } catch (Exception e) {
        return false;
    }
}



KStream<String, String> input = builder.stream("input-topic");

KStream<String, String> transformed = input.mapValues(value -> {
    ObjectNode node;
    try {
        node = (ObjectNode) new ObjectMapper().readTree(value);
        node.put("processed_at", Instant.now().toString());
        return node.toString();
    } catch (Exception e) {
        return value;
    }
});

BranchedKStream<String, String> branched = transformed.split(Named.as("branch-"))
    .branch(
        (key, value) -> isAlert(value),
        Branched.withConsumer(stream -> {
            stream.to("topic-A");
            stream.to("topic-B");
        })
    )
    .defaultBranch(Branched.withConsumer(stream -> {
        stream.to("topic-B");
    }));