import org.bson.*;
import org.bson.types.ObjectId;
import org.bson.Document;

import java.util.*;
import java.util.stream.Collectors;

public class BsonToJavaConverter {

    public static Document convertBsonDocument(BsonDocument bsonDoc) {
        Document doc = new Document();
        for (String key : bsonDoc.keySet()) {
            BsonValue value = bsonDoc.get(key);
            doc.put(key, convertBsonValue(value));
        }
        return doc;
    }

    public static Object convertBsonValue(BsonValue value) {
        if (value == null || value.isNull()) return null;

        return switch (value.getBsonType()) {
            case OBJECT_ID -> value.asObjectId().getValue(); // ObjectId
            case DATE_TIME -> new Date(value.asDateTime().getValue()); // java.util.Date
            case STRING -> value.asString().getValue(); // String
            case INT32 -> value.asInt32().getValue(); // Integer
            case INT64 -> value.asInt64().getValue(); // Long
            case DOUBLE -> value.asDouble().getValue(); // Double
            case BOOLEAN -> value.asBoolean().getValue(); // Boolean
            case ARRAY -> value.asArray()
                    .getValues()
                    .stream()
                    .map(BsonToJavaConverter::convertBsonValue)
                    .collect(Collectors.toList()); // List<Object>
            case DOCUMENT -> convertBsonDocument(value.asDocument()); // Recursive call for nested doc
            case BINARY -> value.asBinary().getData(); // byte[]
            case DECIMAL128 -> value.asDecimal128().bigDecimalValue(); // BigDecimal
            case SYMBOL -> value.asSymbol().getSymbol(); // String (rare)
            case REGULAR_EXPRESSION -> value.asRegularExpression().getPattern(); // Regex pattern string
            case TIMESTAMP -> new Date(value.asTimestamp().getTime() * 1000L); // java.util.Date (approx)
            case NULL -> null;
            case UNDEFINED -> null;
            case JAVASCRIPT -> value.asJavaScript().getCode(); // JS code as string
            case JAVASCRIPT_WITH_SCOPE -> value.asJavaScriptWithScope().getCode();
            case MIN_KEY, MAX_KEY -> null; // no real Java equivalent
            default -> throw new IllegalArgumentException("Unhandled BsonType: " + value.getBsonType());
        };
    }
}
