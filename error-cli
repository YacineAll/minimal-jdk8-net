// CLIOptions.java
import picocli.CommandLine.Option;

public class CLIOptions {
    @Option(names = {"-c", "--compression"}, 
            description = "Compression type (SNAPPY, BZIP2)", 
            defaultValue = "BZIP2")
    private String compressionType;

    @Option(names = {"-l", "--level"}, 
            description = "Compression level (1-9)", 
            defaultValue = "9")
    private int compressionLevel;

    @Option(names = {"-b", "--buffer"}, 
            description = "Buffer size in bytes", 
            defaultValue = "8192")
    private int bufferSize;

    @Option(names = {"-v", "--verbose"}, 
            description = "Enable verbose output")
    private boolean verbose;

    // Getters and setters
    public String getCompressionType() { return compressionType; }
    public int getCompressionLevel() { return compressionLevel; }
    public int getBufferSize() { return bufferSize; }
    public boolean isVerbose() { return verbose; }
}

// CLIArguments.java
import picocli.CommandLine.Parameters;

public class CLIArguments {
    @Parameters(index = "0", 
                description = "Input file or directory path")
    private String inputPath;

    @Parameters(index = "1", 
                description = "Output file or directory path")
    private String outputPath;

    // Getters
    public String getInputPath() { return inputPath; }
    public String getOutputPath() { return outputPath; }
}

// CompressCommand.java
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Mixin;

@Command(name = "compress",
        description = "Compress files in HDFS",
        mixinStandardHelpOptions = true,
        version = "1.0")
public class CompressCommand implements Runnable {
    @Mixin
    private CLIOptions options;

    @Mixin
    private CLIArguments arguments;

    private final HadoopCompressionSystem compressionSystem;

    public CompressCommand() {
        this.compressionSystem = new HadoopCompressionSystem();
    }

    @Override
    public void run() {
        try {
            // Configure compression based on options
            compressionSystem.configure(
                options.getCompressionType(),
                options.getCompressionLevel(),
                options.getBufferSize()
            );

            // Execute compression
            compressionSystem.compressFile(
                arguments.getInputPath(),
                arguments.getOutputPath()
            );

            if (options.isVerbose()) {
                Map<String, Object> stats = compressionSystem.getCompressionStats(
                    arguments.getInputPath(),
                    arguments.getOutputPath()
                );
                printStats(stats);
            }

        } catch (Exception e) {
            System.err.println("Compression failed: " + e.getMessage());
            if (options.isVerbose()) {
                e.printStackTrace();
            }
        }
    }

    private void printStats(Map<String, Object> stats) {
        System.out.printf("Compression Statistics:%n");
        System.out.printf("Original Size: %d bytes%n", stats.get("originalSize"));
        System.out.printf("Compressed Size: %d bytes%n", stats.get("compressedSize"));
        System.out.printf("Compression Ratio: %.2f%n", stats.get("compressionRatio"));
        System.out.printf("Space Saved: %.2f%%%n", stats.get("spaceSavedPercentage"));
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        int exitCode = new CommandLine(new CompressCommand()).execute(args);
        System.exit(exitCode);
    }
}