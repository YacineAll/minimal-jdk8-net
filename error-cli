# üìå Jira Ticket: Externalize Configuration and Remove Derived Images

## üéØ Objective

Refactor the current architecture by removing intermediate Docker images (`transform`, `mirror`) and using a single base image (`file-converter`) with externalized configuration. Configuration will be injected dynamically using Helm and stored in a separate Git repository for better maintainability, scalability, and CI/CD practices.

---

## ‚úÖ Current Architecture (Old Approach)

- One base image: `file-converter` (contains the JAR logic).
- Two derived images:
  - `transform` ‚Üí contains `transform-config.yaml`
  - `mirror` ‚Üí contains `mirror-config.yaml`
- Each derived image is built and deployed separately, with the config baked into the image.

---

## üîÑ Proposed Architecture (New Approach)

- Maintain **only the `file-converter` image**.
- Store each config file (e.g., `transform.yaml`, `mirror.yaml`) in a **separate Git repository**.
- Use **Helm values** to:
  - Select the correct configuration
  - Mount or inject it into the container at runtime
- Configuration becomes dynamic and decoupled from the image.
- No need to rebuild Docker images for config changes.

---

## ‚úÖ Pros of the New Approach

| Category                  | Benefit                                                                 |
|--------------------------|-------------------------------------------------------------------------|
| **Code Maintainability** | Only one image (`file-converter`) to build, test, and secure.           |
| **Separation of Concerns** | Config stored separately from code in Git.                              |
| **CI/CD Simplification** | No need to rebuild for config changes ‚Äî just deploy with new values.    |
| **Faster Deployments**   | Lightweight deploys using Helm upgrades.                                |
| **Reusability**          | Easily create new roles (e.g., `transform`, `mirror`, etc.) with same base image. |
| **Auditability**         | Config versioned and tracked via Git.                                   |
| **Security**             | Only one image to scan and secure.                                      |

---

## ‚ùå Cons / Trade-offs

| Category                  | Risk / Consideration                                                    |
|--------------------------|-------------------------------------------------------------------------|
| **Runtime Dependency**   | App relies on proper config injection at runtime.                       |
| **Config Errors**        | Misconfigured values may cause runtime failures.                        |
| **Testing**              | Requires config to be injected manually during local testing.           |
| **Less Isolation**       | All roles share the same image; misconfiguration could impact behavior. |
| **Deployment Complexity**| Helm charts and templates must be well-validated and maintained.         |

---

## üõ†Ô∏è Suggested Implementation Steps

1. Delete the `transform` and `mirror` Dockerfiles/projects.
2. Keep only the base image `file-converter` with the JAR logic.
3. Move all configuration files to a new Git repo (e.g., `config-file-converter.git`).
4. Modify Helm charts to:
   - Reference the correct config file via values
   - Inject/mount the config into the container (via ConfigMap, volume, or env var)
5. Add startup validation in the JAR to fail gracefully if config is missing/invalid.
6. Optionally add a GitOps or CI trigger to redeploy when config changes.

---

## üß™ Validation Plan

- Deploy `file-converter` with `transform.yaml` via Helm ‚Üí verify output.
- Deploy `file-converter` with `mirror.yaml` via Helm ‚Üí verify output.
- Modify a config file and trigger redeploy ‚Üí verify correct config is loaded without rebuild.




| Benefit                                          | Explanation                                                              |
| ------------------------------------------------ | ------------------------------------------------------------------------ |
| ‚úÖ Self-contained deployment                      | One `values.yaml` file holds all logic ‚Äî no external file dependencies.  |
| ‚úÖ GitOps-friendly                                | Easy to version and review config changes along with deployment configs. |
| ‚úÖ Works with plain `helm upgrade -f values.yaml` | No need for `--set-file` or file copy steps in CI/CD.                    |
| ‚úÖ Supports templating                            | You can use Helm variables or templates inside the config if needed.     |
| ‚úÖ Avoids Helm chart rebuild                      | You don‚Äôt need to rebuild or package Helm every time config changes.     |


| Drawback                      | Explanation                                                                                               |                                            |
| ----------------------------- | --------------------------------------------------------------------------------------------------------- | ------------------------------------------ |
| ‚ùå `values.yaml` becomes huge  | Hard to read/maintain, especially if config is long or deeply nested.                                     |                                            |
| ‚ùå YAML quoting/indent issues  | You must be **very careful** with \`                                                                      | \` blocks, spaces, and special characters. |
| ‚ùå Merge conflicts likely      | If many people touch the same big `values.yaml`, Git conflicts are frequent.                              |                                            |
| ‚ùå Harder to reuse configs     | Can't easily reuse the same config across multiple charts or environments.                                |                                            |
| ‚ùå Less modular                | Config and deployment logic are mixed ‚Äî violates separation of concerns.                                  |                                            |
| ‚ùå Difficult secret management | You can't easily separate secrets from values unless you use external tools (e.g., Sealed Secrets, SOPS). |                                            |



