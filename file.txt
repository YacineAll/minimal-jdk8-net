// MongoDB query to find duplicated business objects
// This query should be run in MongoDB shell or through a MongoDB client

// Step 1: Find all unique combinations of type, product, and subProduct
// Step 2: For each combination, find cases where there are multiple documents sharing IDs

// Finding duplicates based on shared IDs across documents
db.businessObjects.aggregate([
  // Stage 1: Create a document that has all the necessary fields for grouping
  {
    $project: {
      _id: 1,
      type: 1,
      product: 1,
      subProduct: 1,
      ids: 1  // Assuming 'ids' is the array field containing all related IDs
    }
  },
  
  // Stage 2: Unwind the ids array to create a document for each ID
  {
    $unwind: "$ids"
  },
  
  // Stage 3: Group by the combination of type, product, subProduct, and individual ID
  {
    $group: {
      _id: {
        type: "$type",
        product: "$product",
        subProduct: "$subProduct",
        id: "$ids"
      },
      documentIds: { $addToSet: "$_id" },  // Collect all document _ids that contain this ID
      count: { $sum: 1 }
    }
  },
  
  // Stage 4: Filter out cases where an ID is found in only one document
  {
    $match: {
      "count": { $gt: 1 }
    }
  },
  
  // Stage 5: Group back by type, product, subProduct to consolidate all related IDs
  {
    $group: {
      _id: {
        type: "$_id.type",
        product: "$_id.product",
        subProduct: "$_id.subProduct"
      },
      duplicateIdSets: { 
        $addToSet: {
          id: "$_id.id", 
          documentIds: "$documentIds" 
        }
      },
      totalDuplicateIds: { $sum: 1 }
    }
  },
  
  // Stage 6: Sort by the type, product, and number of duplicate IDs
  {
    $sort: {
      "_id.type": 1,
      "_id.product": 1,
      "totalDuplicateIds": -1
    }
  },
  
  // Stage 7: Add descriptive project for better readability
  {
    $project: {
      _id: 0,
      type: "$_id.type",
      product: "$_id.product",
      subProduct: "$_id.subProduct",
      duplicateIdSets: 1,
      totalDuplicateIds: 1
    }
  }
]);

// Alternative simpler query if your documents use a consistent structure
// This finds cases where the same ID appears in multiple documents
db.businessObjects.aggregate([
  // Unwind all IDs from your documents
  { $unwind: "$ids" },
  
  // Group by ID, collecting documents that share this ID
  { $group: {
      _id: "$ids",
      count: { $sum: 1 },
      documents: { $push: { id: "$_id", type: "$type", product: "$product" } }
  }},
  
  // Filter for IDs that appear in multiple documents
  { $match: { count: { $gt: 1 } } },
  
  // Sort by count descending
  { $sort: { count: -1 } }
]);

// Query to find specific duplicates for a given product type
// Replace PRODUCT_NAME with your actual product name
db.businessObjects.aggregate([
  { $match: { product: "PRODUCT_NAME" } },
  { $unwind: "$ids" },
  { $group: {
      _id: "$ids",
      count: { $sum: 1 },
      documents: { $push: { id: "$_id", type: "$type", product: "$product", subProduct: "$subProduct" } }
  }},
  { $match: { count: { $gt: 1 } } },
  { $sort: { count: -1 } }
]);
