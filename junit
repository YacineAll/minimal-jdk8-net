import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.*;

import picocli.CommandLine;
import java.io.PrintWriter;
import java.io.StringWriter;

// Assume this is your CLI command class
@CommandLine.Command(name = "myapp", description = "Sample CLI application")
class MyCliCommand implements Runnable {
    @CommandLine.Option(names = {"-n", "--name"}, description = "User name")
    private String name;

    @CommandLine.Option(names = {"-c", "--count"}, description = "Count value")
    private Integer count = 1;

    private StringBuilder output = new StringBuilder();

    @Override
    public void run() {
        for (int i = 0; i < count; i++) {
            output.append("Hello ").append(name != null ? name : "World").append("!\n");
        }
    }

    public String getOutput() {
        return output.toString();
    }
}

class MyCliCommandTest {
    private MyCliCommand command;
    private CommandLine commandLine;
    private StringWriter sw;
    private PrintWriter pw;

    @BeforeEach
    void setUp() {
        command = new MyCliCommand();
        commandLine = new CommandLine(command);
        sw = new StringWriter();
        pw = new PrintWriter(sw);
        commandLine.setOut(pw);
        commandLine.setErr(pw);
    }

    @Test
    void testBasicCommand() {
        // When
        int exitCode = commandLine.execute();
        
        // Then
        assertEquals(0, exitCode);
        assertEquals("Hello World!\n", command.getOutput());
    }

    @Test
    void testWithName() {
        // When
        int exitCode = commandLine.execute("-n", "Alice");
        
        // Then
        assertEquals(0, exitCode);
        assertEquals("Hello Alice!\n", command.getOutput());
    }

    @Test
    void testWithCount() {
        // When
        int exitCode = commandLine.execute("-n", "Bob", "-c", "3");
        
        // Then
        assertEquals(0, exitCode);
        assertEquals("Hello Bob!\nHello Bob!\nHello Bob!\n", command.getOutput());
    }

    @Test
    void testInvalidOption() {
        // When
        int exitCode = commandLine.execute("--invalid-option");
        
        // Then
        assertEquals(2, exitCode); // Picocli returns 2 for usage errors
        assertTrue(sw.toString().contains("Unknown option: '--invalid-option'"));
    }

    @Test
    void testInvalidCountValue() {
        // When
        int exitCode = commandLine.execute("-c", "not-a-number");
        
        // Then
        assertEquals(2, exitCode);
        assertTrue(sw.toString().contains("Invalid value for option '--count'"));
    }

    @Test
    void testHelp() {
        // When
        int exitCode = commandLine.execute("--help");
        
        // Then
        assertEquals(0, exitCode);
        String output = sw.toString();
        assertTrue(output.contains("Usage:"));
        assertTrue(output.contains("myapp"));
        assertTrue(output.contains("-n, --name"));
        assertTrue(output.contains("-c, --count"));
    }
}