import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.yarn.api.records.*;
import org.apache.hadoop.yarn.client.api.YarnClient;
import org.apache.hadoop.yarn.conf.YarnConfiguration;
import org.apache.hadoop.yarn.util.Records;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;
import picocli.CommandLine.Parameters;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.concurrent.Callable;

@Command(
    name = "yarn-compress",
    version = "1.0",
    description = "Compress files using BZip2 in YARN cluster",
    mixinStandardHelpOptions = true
)
public class YarnCompressionApp extends Configured implements Tool, Callable<Integer> {
    
    @Parameters(
        index = "0",
        description = "Input file path to compress"
    )
    private String inputPath;

    @Option(
        names = {"-m", "--memory"},
        description = "Memory in MB for YARN container (default: ${DEFAULT-VALUE})",
        defaultValue = "1024"
    )
    private int memoryMB;

    @Option(
        names = {"-c", "--cores"},
        description = "Number of virtual cores (default: ${DEFAULT-VALUE})",
        defaultValue = "1"
    )
    private int virtualCores;

    @Option(
        names = {"-q", "--queue"},
        description = "YARN queue name (default: ${DEFAULT-VALUE})",
        defaultValue = "default"
    )
    private String queueName;

    @Option(
        names = {"-p", "--priority"},
        description = "Application priority (default: ${DEFAULT-VALUE})",
        defaultValue = "0"
    )
    private int priority;

    public static void main(String[] args) {
        int exitCode = new CommandLine(new YarnCompressionApp())
            .setCaseInsensitiveEnumValuesAllowed(true)
            .execute(args);
        System.exit(exitCode);
    }

    @Override
    public Integer call() throws Exception {
        return run(new String[]{inputPath});
    }
    
    @Override
    public int run(String[] args) throws Exception {
        // Create Yarn client
        YarnConfiguration conf = new YarnConfiguration(getConf());
        YarnClient yarnClient = YarnClient.createYarnClient();
        yarnClient.init(conf);
        yarnClient.start();
        
        try {
            // Create application
            ApplicationSubmissionContext appContext = 
                yarnClient.createApplication().getApplicationSubmissionContext();
            
            // Set application name and queue
            appContext.setApplicationName("YarnCompression-" + inputPath);
            appContext.setQueue(queueName);
            
            // Set priority
            Priority appPriority = Records.newRecord(Priority.class);
            appPriority.setPriority(priority);
            appContext.setPriority(appPriority);
            
            // Container context
            ContainerLaunchContext containerContext = Records.newRecord(ContainerLaunchContext.class);
            
            // Java command with options
            Vector<CharSequence> vargs = new Vector<>();
            vargs.add("${JAVA_HOME}/bin/java");
            vargs.add("-Xmx" + (memoryMB - 256) + "m"); // Leave some overhead
            vargs.add("com.yourcompany.CompressionExecutor");
            vargs.add(inputPath);
            
            // Environment setup
            Map<String, String> env = new HashMap<>();
            env.put("CLASSPATH", getClasspath(conf));
            containerContext.setEnvironment(env);
            
            // Command to execute
            StringBuilder command = new StringBuilder();
            for (CharSequence str : vargs) {
                command.append(str).append(" ");
            }
            containerContext.setCommands(Arrays.asList(command.toString()));
            
            // Resource requirements
            Resource capability = Records.newRecord(Resource.class);
            capability.setMemorySize(memoryMB);
            capability.setVirtualCores(virtualCores);
            
            // Set container spec
            appContext.setResource(capability);
            appContext.setAMContainerSpec(containerContext);
            
            // Submit application
            ApplicationId appId = appContext.getApplicationId();
            System.out.println("Submitting application " + appId);
            yarnClient.submitApplication(appContext);
            
            // Monitor progress
            boolean finished = false;
            while (!finished) {
                Thread.sleep(1000);
                ApplicationReport report = yarnClient.getApplicationReport(appId);
                YarnApplicationState state = report.getYarnApplicationState();
                FinalApplicationStatus status = report.getFinalApplicationStatus();
                
                if (status != FinalApplicationStatus.UNDEFINED) {
                    System.out.println(String.format("Application %s status: %s", appId, status));
                }
                
                if (state == YarnApplicationState.FINISHED || 
                    state == YarnApplicationState.KILLED || 
                    state == YarnApplicationState.FAILED) {
                    finished = true;
                    System.out.println("Application completed with status: " + status);
                    
                    // Get the final exit code
                    if (status == FinalApplicationStatus.FAILED) {
                        return 1;
                    }
                }
            }
            
            return 0;
        } finally {
            yarnClient.stop();
        }
    }
    
    private String getClasspath(Configuration conf) {
        StringBuilder classPath = new StringBuilder();
        classPath.append("${CLASSPATH}:./*:");
        
        for (String c : conf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,
                YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {
            classPath.append(c.trim()).append(":");
        }
        
        return classPath.toString();
    }
}
