import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.compress.BZip2Codec;
import org.apache.hadoop.io.compress.CompressionCodec;
import org.apache.hadoop.io.compress.CompressionOutputStream;
import org.apache.hadoop.io.compress.CompressionInputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.security.MessageDigest;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Objects;

public class HadoopCompressor {
    private static final int DEFAULT_BUFFER_SIZE = 65536;
    
    /**
     * Compresses a file and validates the compression
     * @return CompressResult object containing success status and validation details
     */
    public static CompressResult compressFileWithValidation(String inputPath, int bufferSize) throws IOException {
        CompressResult result = new CompressResult();
        
        // First, calculate checksum of original file
        String originalChecksum = calculateFileChecksum(inputPath);
        result.setOriginalChecksum(originalChecksum);
        
        // Perform compression
        boolean compressionSuccess = compressFile(inputPath, bufferSize);
        result.setCompressionSuccess(compressionSuccess);
        
        if (compressionSuccess) {
            // Validate the compressed file
            boolean isValid = validateCompressedFile(inputPath, inputPath + ".bz2", originalChecksum);
            result.setValidationSuccess(isValid);
            
            // If validation fails, delete the corrupt compressed file
            if (!isValid) {
                deleteFile(inputPath + ".bz2");
                result.setErrorMessage("Validation failed - compressed file was deleted");
            }
        }
        
        return result;
    }
    
    /**
     * Calculates SHA-256 checksum of file content
     */
    private static String calculateFileChecksum(String filePath) throws IOException {
        Configuration conf = new Configuration();
        conf.set("fs.file.impl", "org.apache.hadoop.fs.RawLocalFileSystem");
        FileSystem fs = FileSystem.get(conf);
        Path path = new Path(filePath);
        
        try (InputStream in = fs.open(path)) {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
            int bytesRead;
            
            while ((bytesRead = in.read(buffer)) != -1) {
                digest.update(buffer, 0, bytesRead);
            }
            
            byte[] hash = digest.digest();
            StringBuilder hexString = new StringBuilder();
            for (byte b : hash) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) hexString.append('0');
                hexString.append(hex);
            }
            return hexString.toString();
        } catch (Exception e) {
            throw new IOException("Error calculating checksum: " + e.getMessage(), e);
        }
    }
    
    /**
     * Validates compressed file by decompressing and comparing checksums
     */
    private static boolean validateCompressedFile(String originalPath, String compressedPath, String originalChecksum) 
            throws IOException {
        Configuration conf = new Configuration();
        conf.set("fs.file.impl", "org.apache.hadoop.fs.RawLocalFileSystem");
        FileSystem fs = FileSystem.get(conf);
        
        try {
            // Set up BZip2 codec for decompression
            BZip2Codec codec = new BZip2Codec();
            codec.setConf(conf);
            
            // Create temporary file for decompressed content
            String tempDecompressed = compressedPath + ".temp";
            Path tempPath = new Path(tempDecompressed);
            
            // Decompress the file
            try (CompressionInputStream compressedIn = codec.createInputStream(fs.open(new Path(compressedPath)));
                 OutputStream tempOut = fs.create(tempPath)) {
                
                byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
                int bytesRead;
                while ((bytesRead = compressedIn.read(buffer)) != -1) {
                    tempOut.write(buffer, 0, bytesRead);
                }
            }
            
            // Calculate checksum of decompressed file
            String decompressedChecksum = calculateFileChecksum(tempDecompressed);
            
            // Clean up temporary file
            fs.delete(tempPath, false);
            
            // Compare checksums
            return originalChecksum.equals(decompressedChecksum);
            
        } catch (Exception e) {
            throw new IOException("Error during validation: " + e.getMessage(), e);
        }
    }
    
    private static void deleteFile(String filePath) throws IOException {
        Configuration conf = new Configuration();
        conf.set("fs.file.impl", "org.apache.hadoop.fs.RawLocalFileSystem");
        FileSystem fs = FileSystem.get(conf);
        fs.delete(new Path(filePath), false);
    }
    
    // Original compression method (unchanged)
    public static boolean compressFile(String inputPath, int bufferSize) throws IOException {
        // ... (previous implementation remains the same)
    }
    
    public static boolean compressFile(String inputPath) throws IOException {
        return compressFile(inputPath, DEFAULT_BUFFER_SIZE);
    }
}

/**
 * Class to hold compression and validation results
 */
public static class CompressResult {
    private boolean compressionSuccess;
    private boolean validationSuccess;
    private String originalChecksum;
    private String errorMessage;
    
    // Getters and setters
    public boolean isCompressionSuccess() { return compressionSuccess; }
    public void setCompressionSuccess(boolean success) { this.compressionSuccess = success; }
    
    public boolean isValidationSuccess() { return validationSuccess; }
    public void setValidationSuccess(boolean success) { this.validationSuccess = success; }
    
    public String getOriginalChecksum() { return originalChecksum; }
    public void setOriginalChecksum(String checksum) { this.originalChecksum = checksum; }
    
    public String getErrorMessage() { return errorMessage; }
    public void setErrorMessage(String message) { this.errorMessage = message; }
    
    @Override
    public String toString() {
        return String.format("Compression: %s, Validation: %s, Checksum: %s%s", 
            compressionSuccess, validationSuccess, originalChecksum,
            errorMessage != null ? ", Error: " + errorMessage : "");
    }
}