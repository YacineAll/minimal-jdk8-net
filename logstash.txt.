import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.yarn.api.records.ApplicationId;
import org.apache.hadoop.yarn.api.records.ApplicationSubmissionContext;
import org.apache.hadoop.yarn.api.records.ContainerLaunchContext;
import org.apache.hadoop.yarn.api.records.Resource;
import org.apache.hadoop.yarn.client.api.YarnClient;
import org.apache.hadoop.yarn.conf.YarnConfiguration;
import org.apache.hadoop.yarn.util.Records;

import java.util.HashMap;
import java.util.Map;
import java.util.Vector;

public class YarnCompressionApp extends Configured implements Tool {
    
    private static final String APP_NAME = "YarnCompression";
    
    public static void main(String[] args) throws Exception {
        int exitCode = ToolRunner.run(new YarnCompressionApp(), args);
        System.exit(exitCode);
    }
    
    @Override
    public int run(String[] args) throws Exception {
        if (args.length != 1) {
            System.err.println("Usage: YarnCompressionApp <input_path>");
            return -1;
        }
        
        // Create Yarn client
        YarnConfiguration conf = new YarnConfiguration(getConf());
        YarnClient yarnClient = YarnClient.createYarnClient();
        yarnClient.init(conf);
        yarnClient.start();
        
        try {
            // Create application submission context
            ApplicationSubmissionContext appContext = 
                yarnClient.createApplication().getApplicationSubmissionContext();
            
            // Set application name
            appContext.setApplicationName(APP_NAME);
            
            // Set up the container launch context
            ContainerLaunchContext containerContext = Records.newRecord(ContainerLaunchContext.class);
            
            // Set up the java command
            Vector<CharSequence> vargs = new Vector<>();
            vargs.add("${JAVA_HOME}/bin/java");
            vargs.add("-Xmx1024m");
            vargs.add("com.yourcompany.CompressionExecutor");  // Your main class
            vargs.add(args[0]);  // Input path argument
            
            // Set up environment
            Map<String, String> env = new HashMap<>();
            env.put("CLASSPATH", getClasspath(conf));
            containerContext.setEnvironment(env);
            
            // Command to execute
            StringBuilder command = new StringBuilder();
            for (CharSequence str : vargs) {
                command.append(str).append(" ");
            }
            containerContext.setCommands(Arrays.asList(command.toString()));
            
            // Set up resource requirements
            Resource capability = Records.newRecord(Resource.class);
            capability.setMemorySize(1024);  // 1GB memory
            capability.setVirtualCores(1);    // 1 core
            
            // Set container launch context
            appContext.setResource(capability);
            appContext.setAMContainerSpec(containerContext);
            
            // Submit the application
            ApplicationId appId = appContext.getApplicationId();
            System.out.println("Submitting application " + appId);
            yarnClient.submitApplication(appContext);
            
            // Monitor the application
            boolean finished = false;
            while (!finished) {
                Thread.sleep(1000);
                ApplicationReport report = yarnClient.getApplicationReport(appId);
                YarnApplicationState state = report.getYarnApplicationState();
                FinalApplicationStatus status = report.getFinalApplicationStatus();
                
                if (state == YarnApplicationState.FINISHED || 
                    state == YarnApplicationState.KILLED || 
                    state == YarnApplicationState.FAILED) {
                    finished = true;
                    System.out.println("Application completed with status: " + status);
                }
            }
            
            return 0;
        } finally {
            yarnClient.stop();
        }
    }
    
    private String getClasspath(Configuration conf) {
        StringBuilder classPath = new StringBuilder();
        
        // Add the current jar
        classPath.append("${CLASSPATH}:./*:");
        
        // Add Hadoop configuration directories
        for (String c : conf.getStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH,
                YarnConfiguration.DEFAULT_YARN_APPLICATION_CLASSPATH)) {
            classPath.append(c.trim()).append(":");
        }
        
        return classPath.toString();
    }
}

// Executor class that will run in the container
public class CompressionExecutor {
    public static void main(String[] args) {
        try {
            String inputPath = args[0];
            HadoopCompressor.CompressResult result = 
                HadoopCompressor.compressFileWithValidation(inputPath, HadoopCompressor.DEFAULT_BUFFER_SIZE);
            
            if (result.isCompressionSuccess() && result.isValidationSuccess()) {
                System.out.println("Compression completed successfully");
                System.out.println("Checksum: " + result.getOriginalChecksum());
                System.exit(0);
            } else {
                System.err.println("Compression failed: " + result.getErrorMessage());
                System.exit(1);
            }
        } catch (Exception e) {
            System.err.println("Error during compression: " + e.getMessage());
            e.printStackTrace();
            System.exit(2);
        }
    }
}